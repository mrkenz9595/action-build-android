name: Build Android APK Release
run-name: ${{ github.event.inputs.repository }}:${{ github.event.inputs.taskName }}

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Git repository URL"
        required: true
        default: "https://github.com/android/sunflower"
      jdkVersion:
        description: "OpenJDK version to use: 8 / 11 / 17 etc."
        required: false
        default: "17"
      taskName:
        description: "build.gradle task name: assemble[Flavor]Debug"
        required: false
        default: "assembleDebug"

jobs:
  build:
    runs-on: ubuntu-latest # Android SDK is built-in in this image
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ github.event.inputs.jdkVersion }}

      - name: Clone project
        run: git clone --recurse-submodules --depth=1 ${{ github.event.inputs.repository }} workspace

      - name: Build APK
        working-directory: ./workspace
        run: |
          if [ ! -f "gradlew" ]; then gradle wrapper; fi
          chmod +x gradlew
          ./gradlew ${{ github.event.inputs.taskName }} --stacktrace

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const releaseName = `Release v${new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')}`;
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')}`,
              name: releaseName,
              draft: false,
              prerelease: false,
            });
            return release.data.upload_url;

      - name: Upload APK to Release
        uses: actions/github-script@v6
        with:
          script: |
            const uploadUrl = '${{ steps.create_release.outputs.upload_url }}';
            const fs = require('fs');
            const path = require('path');
            const apkFiles = fs.readdirSync('./workspace').filter(file => file.endsWith('.apk'));
            if (apkFiles.length === 0) {
              throw new Error('No APK files found to upload.');
            }
            const apkPath = path.join('./workspace', apkFiles[0]);
            await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl.replace('{?name,label}', ''),
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fs.statSync(apkPath).size,
              },
              data: fs.readFileSync(apkPath),
              name: apkFiles[0],
            });
